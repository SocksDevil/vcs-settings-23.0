package patches.projects

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.Project
import jetbrains.buildServer.configs.kotlin.projectFeatures.HashiCorpVaultConnection
import jetbrains.buildServer.configs.kotlin.projectFeatures.KubernetesConnection
import jetbrains.buildServer.configs.kotlin.projectFeatures.KubernetesExecutor
import jetbrains.buildServer.configs.kotlin.projectFeatures.hashiCorpVaultConnection
import jetbrains.buildServer.configs.kotlin.projectFeatures.kubernetesConnection
import jetbrains.buildServer.configs.kotlin.projectFeatures.kubernetesExecutor
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the root project
accordingly, and delete the patch script.
*/
changeProject(DslContext.projectId) {
    params {
        add {
            text("inherit", "meow")
        }
    }

    features {
        val feature1 = find<KubernetesConnection> {
            kubernetesConnection {
                id = "PROJECT_EXT_10"
                name = "EKS"
                apiServerUrl = "meow"
                namespace = "meow"
                authStrategy = eks {
                    accessId = "id"
                    secretKey = "credentialsJSON:3507800f-ae64-49f1-bbb5-0a4deec5c7b3"
                    clusterName = "cluster-name"
                }
            }
        }
        feature1.apply {
            authStrategy = eks {
                eksUseInstanceProfile = true
                accessId = "id"
                secretKey = "credentialsJSON:3507800f-ae64-49f1-bbb5-0a4deec5c7b3"
                iamRoleArn = ""
                clusterName = "cluster-name"
            }
        }
        val feature2 = find<KubernetesExecutor> {
            kubernetesExecutor {
                id = "PROJECT_EXT_23"
                connectionId = "PROJECT_EXT_3"
                profileName = "Meow"
                buildsLimit = "1"
                enabled = true
                param("parametersAvailable", "1")
            }
        }
        feature2.apply {
            buildsLimit = "2"
            param("parametersAvailable", "")
            param("enabled", "")
        }
        remove {
            kubernetesConnection {
                id = "PROJECT_EXT_9"
                name = "EKS with server instance profile"
                apiServerUrl = "meow"
                authStrategy = eks {
                    eksUseInstanceProfile = true
                    assumeIamRole = true
                    iamRoleArn = "arn"
                    clusterName = "cluster-name"
                }
            }
        }
        val feature3 = find<HashiCorpVaultConnection> {
            hashiCorpVaultConnection {
                id = "hashicorpVaultConnection1"
                name = "HashiCorp Vault"
                vaultId = ""
                url = "http://127.0.0.1:8200"
                authMethod = appRole {
                    roleId = "f3e75c6b-118b-48a1-97fc-6b8a69eb3bc3"
                    secretId = "credentialsJSON:a90c9e97-f71b-4571-bfff-24f0eb0db85b"
                }
                failOnError = false
            }
        }
        feature3.apply {
        }
    }
}
