import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.KubernetesCloudImage
import jetbrains.buildServer.configs.kotlin.buildSteps.gradle
import jetbrains.buildServer.configs.kotlin.kubernetesCloudImage
import jetbrains.buildServer.configs.kotlin.kubernetesCloudProfile
import jetbrains.buildServer.configs.kotlin.projectFeatures.kubernetesConnection
import jetbrains.buildServer.configs.kotlin.projectFeatures.kubernetesExecutor
import jetbrains.buildServer.configs.kotlin.triggers.vcs
import jetbrains.buildServer.configs.kotlin.vcs.GitVcsRoot

/*
The settings script is an entry point for defining a TeamCity
project hierarchy. The script should contain a single call to the
project() function with a Project instance or an init function as
an argument.

VcsRoots, BuildTypes, Templates, and subprojects can be
registered inside the project using the vcsRoot(), buildType(),
template(), and subProject() methods respectively.

To debug settings scripts in command-line, run the

    mvnDebug org.jetbrains.teamcity:teamcity-configs-maven-plugin:generate

command and attach your debugger to the port 8000.

To debug in IntelliJ Idea, open the 'Maven Projects' tool window (View
-> Tool Windows -> Maven Projects), find the generate task node
(Plugins -> teamcity-configs -> teamcity-configs:generate), the
'Debug' option is available in the context menu for the task.
*/

version = "2024.07"

project {

    vcsRoot(HttpsGithubComSocksDevilTeamcityAwsLambdaPluginExampleRefsHeadsMain)

    buildType(Build)

    params {
        param("test", "meow")
        text("meow", "meow", description = "MeowMeow!")
    }

    features {
        kubernetesConnection {
            id = "PROJECT_EXT_10"
            name = "EKS"
            apiServerUrl = "meow"
            namespace = "meow"
            authStrategy = eks {
                accessId = "id"
                secretKey = "credentialsJSON:3507800f-ae64-49f1-bbb5-0a4deec5c7b3"
                clusterName = "cluster-name"
            }
        }
        kubernetesConnection {
            id = "PROJECT_EXT_11"
            name = "Username and Password"
            apiServerUrl = "meow"
            namespace = "meow"
            authStrategy = usernameAndPassword {
                username = "username"
                password = "credentialsJSON:aaef5e7e-5a51-427c-b0ea-3af364cacedd"
            }
        }
        kubernetesConnection {
            id = "PROJECT_EXT_12"
            name = "Default Service Account"
            apiServerUrl = "meow"
            namespace = "meow"
            authStrategy = serviceAccount()
        }
        kubernetesConnection {
            id = "PROJECT_EXT_13"
            name = "Open ID"
            apiServerUrl = "meow"
            namespace = "meow"
            authStrategy = openId {
                idpIssuerUrl = "idpurl"
                clientId = "clientId"
                clientSecret = "credentialsJSON:612f3414-2b25-41ec-9520-12c9669d1f85"
                refreshToken = "credentialsJSON:0bb3f85a-7ff4-474e-9c14-8da47099595a"
            }
        }
        kubernetesCloudImage {
            id = "PROJECT_EXT_18"
            profileId = "kube-2"
            agentPoolId = "-2"
            podSpecification = runContainer {
                dockerImage = "jetbrains/teamcity-agent"
                command = "sleep"
                arguments = "10000000000"
                pullPolicy = KubernetesCloudImage.PullPolicy.ALWAYS
            }
        }
        kubernetesConnection {
            id = "PROJECT_EXT_3"
            name = "EKS Connection"
            apiServerUrl = "https://6c60846089ad8c095bed3b18ff6d84a0.gr7.eu-west-1.eks.amazonaws.com"
            caCertificate = "credentialsJSON:c77bc0a7-f461-4ca8-959b-ee5c8f6389b6"
            namespace = "executor-pods"
            authStrategy = token {
                token = "credentialsJSON:fa92592e-ec16-4543-add0-1cdd4de87e5e"
            }
        }
        kubernetesExecutor {
            id = "PROJECT_EXT_4"
            connectionId = "PROJECT_EXT_3"
            profileName = "Meow"
            templateContainer = """
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                      # This is a template container, where all the presented settings will be used for the real containers generated by TeamCity
                      # Please refrain from adding new containers, as those can't be added to your build
                      # To modify the volume used to run the build, add a volume with the name agent-volume
                    - name: template-container
            """.trimIndent()
        }
        kubernetesConnection {
            id = "PROJECT_EXT_5"
            name = "JetBrains Console"
            apiServerUrl = "https://1d9de0392c8cfac214189045f2125202.gr7.eu-west-1.eks.amazonaws.com"
            caCertificate = "credentialsJSON:ffe4af77-1daf-4824-975f-a6778d5566fd"
            namespace = "teamcity-cloud"
            authStrategy = token {
                token = "credentialsJSON:df987c3f-e01d-4a37-b75d-b270c95f2a2f"
            }
        }
        kubernetesConnection {
            id = "PROJECT_EXT_7"
            name = "Unauthorized"
            apiServerUrl = "meow"
            namespace = "meowmeow"
            authStrategy = unauthorized()
        }
        kubernetesConnection {
            id = "PROJECT_EXT_8"
            name = "Certificate & Key"
            apiServerUrl = "meow"
            namespace = "meow"
            authStrategy = clientCertificateAndKey {
                clientKey = "credentialsJSON:43b46ece-15a7-4621-a271-7d2b33e9e356"
                clientCertificate = "credentialsJSON:87a6537c-cb8f-4684-b44d-e0ea183e9fa1"
            }
        }
        kubernetesConnection {
            id = "PROJECT_EXT_9"
            name = "EKS with server instance profile"
            apiServerUrl = "meow"
            authStrategy = eks {
                eksUseInstanceProfile = true
                assumeIamRole = true
                iamRoleArn = "arn"
                clusterName = "cluster-name"
            }
        }
        kubernetesCloudProfile {
            id = "kube-2"
            name = "K8S"
            terminateAfterBuild = true
            terminateIdleMinutes = 30
            apiServerURL = "https://6c60846089ad8c095bed3b18ff6d84a0.gr7.eu-west-1.eks.amazonaws.com"
            caCertData = "credentialsJSON:c77bc0a7-f461-4ca8-959b-ee5c8f6389b6"
            namespace = "executor-pods"
            authStrategy = token {
                token = "credentialsJSON:fa92592e-ec16-4543-add0-1cdd4de87e5e"
            }
        }
    }

    subProject(ChildProject)
}

object Build : BuildType({
    name = "Build"

    vcs {
        root(HttpsGithubComSocksDevilTeamcityAwsLambdaPluginExampleRefsHeadsMain)
    }

    steps {
        gradle {
            id = "gradle_runner"
            tasks = "clean build"
            gradleWrapperPath = ""
        }
    }

    triggers {
        vcs {
        }
    }
})

object HttpsGithubComSocksDevilTeamcityAwsLambdaPluginExampleRefsHeadsMain : GitVcsRoot({
    name = "https://github.com/SocksDevil/teamcity-aws-lambda-plugin-example#refs/heads/main"
    url = "https://github.com/SocksDevil/teamcity-aws-lambda-plugin-example"
    branch = "refs/heads/main"
    branchSpec = "refs/heads/*"
    authMethod = password {
        userName = "SocksDevil"
        password = "credentialsJSON:2091df62-b0a6-494c-9dd1-b03db1aaf9c6"
    }
})


object ChildProject : Project({
    name = "Child Project"

    vcsRoot(ChildProject_HttpsGithubComSocksDevilTeamcityAwsLambdaPluginExampleRefsHeadsMain)

    buildType(ChildProject_Build)
})

object ChildProject_Build : BuildType({
    name = "Build"

    vcs {
        root(ChildProject_HttpsGithubComSocksDevilTeamcityAwsLambdaPluginExampleRefsHeadsMain)
    }

    steps {
        gradle {
            id = "gradle_runner"
            tasks = "clean build"
            gradleWrapperPath = ""
        }
    }

    triggers {
        vcs {
        }
    }
})

object ChildProject_HttpsGithubComSocksDevilTeamcityAwsLambdaPluginExampleRefsHeadsMain : GitVcsRoot({
    name = "https://github.com/SocksDevil/teamcity-aws-lambda-plugin-example#refs/heads/main"
    url = "https://github.com/SocksDevil/teamcity-aws-lambda-plugin-example"
    branch = "refs/heads/main"
    branchSpec = "refs/heads/*"
    authMethod = password {
        userName = "SocksDevil"
        password = "credentialsJSON:2091df62-b0a6-494c-9dd1-b03db1aaf9c6"
    }
})
